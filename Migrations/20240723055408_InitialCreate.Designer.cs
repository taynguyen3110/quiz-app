// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using quiz_app.Data;

#nullable disable

namespace quiz_app.Migrations
{
    [DbContext(typeof(QuizDbContext))]
    [Migration("20240723055408_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("quiz_app.Models.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerId"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            AnswerId = 1,
                            IsCorrect = true,
                            QuestionId = 1,
                            Text = "Paris"
                        },
                        new
                        {
                            AnswerId = 2,
                            IsCorrect = false,
                            QuestionId = 1,
                            Text = "London"
                        },
                        new
                        {
                            AnswerId = 3,
                            IsCorrect = false,
                            QuestionId = 1,
                            Text = "Berlin"
                        },
                        new
                        {
                            AnswerId = 4,
                            IsCorrect = false,
                            QuestionId = 1,
                            Text = "Madrid"
                        },
                        new
                        {
                            AnswerId = 5,
                            IsCorrect = true,
                            QuestionId = 2,
                            Text = "Jupiter"
                        },
                        new
                        {
                            AnswerId = 6,
                            IsCorrect = false,
                            QuestionId = 2,
                            Text = "Saturn"
                        },
                        new
                        {
                            AnswerId = 7,
                            IsCorrect = false,
                            QuestionId = 2,
                            Text = "Mars"
                        },
                        new
                        {
                            AnswerId = 8,
                            IsCorrect = false,
                            QuestionId = 2,
                            Text = "Earth"
                        },
                        new
                        {
                            AnswerId = 9,
                            IsCorrect = true,
                            QuestionId = 3,
                            Text = "Harper Lee"
                        },
                        new
                        {
                            AnswerId = 10,
                            IsCorrect = false,
                            QuestionId = 3,
                            Text = "Jane Austen"
                        },
                        new
                        {
                            AnswerId = 11,
                            IsCorrect = false,
                            QuestionId = 3,
                            Text = "Mark Twain"
                        },
                        new
                        {
                            AnswerId = 12,
                            IsCorrect = false,
                            QuestionId = 3,
                            Text = "Ernest Hemingway"
                        });
                });

            modelBuilder.Entity("quiz_app.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<int?>("QuizAttemptId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId");

                    b.HasIndex("QuizAttemptId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            QuestionId = 1,
                            Text = "What is the capital of France?"
                        },
                        new
                        {
                            QuestionId = 2,
                            Text = "What is the largest planet in our solar system?"
                        },
                        new
                        {
                            QuestionId = 3,
                            Text = "Who wrote 'To Kill a Mockingbird'?"
                        });
                });

            modelBuilder.Entity("quiz_app.Models.QuizAttempt", b =>
                {
                    b.Property<int>("QuizAttemptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuizAttemptId"));

                    b.Property<DateTime>("AttemptDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("QuizAttemptId");

                    b.ToTable("QuizAttempts");

                    b.HasData(
                        new
                        {
                            QuizAttemptId = 1,
                            AttemptDate = new DateTime(2024, 7, 23, 15, 54, 7, 216, DateTimeKind.Local).AddTicks(813),
                            Score = 2
                        });
                });

            modelBuilder.Entity("quiz_app.Models.Answer", b =>
                {
                    b.HasOne("quiz_app.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("quiz_app.Models.Question", b =>
                {
                    b.HasOne("quiz_app.Models.QuizAttempt", null)
                        .WithMany("Questions")
                        .HasForeignKey("QuizAttemptId");
                });

            modelBuilder.Entity("quiz_app.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("quiz_app.Models.QuizAttempt", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
